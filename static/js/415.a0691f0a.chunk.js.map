{"version":3,"file":"static/js/415.a0691f0a.chunk.js","mappings":"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","sources":["components/Filter/Filter.jsx","components/ContactsListItem/ContactsListItem.jsx","components/ContactsList/ContactsList.jsx","components/Form/Form.jsx","page/Constcts/Constcts.jsx"],"sourcesContent":["import React, { useCallback } from 'react';\nimport TextField from '@mui/material/TextField';\nimport { FormControl } from '@mui/material';\nimport { useDispatch } from 'react-redux';\nimport { filterChange } from 'redux/filterSlice';\n\nfunction Filter() {\n  const dispatch = useDispatch();\n\n  const setFilterData = useCallback(\n    e => {\n      const { value } = e.currentTarget;\n      dispatch(filterChange(value.toLowerCase()));\n    },\n    [dispatch]\n  );\n\n  return (\n    <FormControl\n      sx={{\n        minWidth: '350px',\n        maxWidth: '500px',\n        gap: '10px',\n        margin: '0 auto',\n      }}\n    >\n      <TextField\n        id=\"outlined-basic\"\n        label=\"Filter\"\n        variant=\"outlined\"\n        type=\"search\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        onChange={setFilterData}\n      />\n    </FormControl>\n  );\n}\n\nexport default React.memo(Filter);","import {\n  colors,\n  IconButton,\n  ListItemText,\n  ListItem,\n  ListItemAvatar,\n  Avatar,\n} from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport FaceIcon from '@mui/icons-material/Face';\n\nimport { useDeleteContactMutation } from 'redux/contactsAPI';\n\nconst ContactsListItem = ({ name, id, phone }) => {\n  const [deleteContact] = useDeleteContactMutation();\n\n  const handleDelete = async id => {\n    await deleteContact(id);\n  };\n\n  return (\n    <>\n      <ListItem\n        key={id}\n        secondaryAction={\n          <IconButton\n            edge=\"end\"\n            aria-label=\"delete\"\n            onClick={() => handleDelete(id)}\n            color=\"error\"\n          >\n            <DeleteIcon />\n          </IconButton>\n        }\n      >\n        <ListItemAvatar>\n          <Avatar size=\"small\" sx={{ bgcolor: colors.green[500] }}>\n            <FaceIcon />\n          </Avatar>\n        </ListItemAvatar>\n        <ListItemText primary={name} secondary={phone} />\n      </ListItem>\n    </>\n  );\n};\n\nexport default ContactsListItem;\n","import { Stack, List } from '@mui/material';\n\nimport ContactsListItem from 'components/ContactsListItem/ContactsListItem';\n\nconst style = {\n  boxShadow: 1,\n  borderRadius: 2,\n  border: '1px solid lightgray',\n  p: 2,\n  minWidth: 350,\n  maxWidth: 500,\n  alignItems: 'center',\n  padding: 0,\n};\n\nconst ContactsList = ({ contacts }) => {\n  return (\n    <>\n      <Stack direction=\"column\" justifyContent=\"flex-start\" alignItems=\"center\">\n        <List sx={style} aria-label=\"contacts\">\n          {contacts.map(({ name, number, id }) => {\n            return (\n              <ContactsListItem name={name} id={id} phone={number} key={id} />\n            );\n          })}\n        </List>\n      </Stack>\n    </>\n  );\n};\n\nexport default ContactsList;","import { FormControl, Typography } from '@mui/material';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport { useAddContactMutation, useGetContactsQuery } from 'redux/contactsAPI';\n\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\n\n\n\nconst phoneRegExp = /^\\+380\\d{9}$/;\n\nconst validationSchema = Yup.object().shape({\n    name: Yup.string()\n        .min(2, 'Too Short!')\n        .max(50, 'Too Long!')\n        .required('Required'),\n    phone: Yup.string()\n        .length(13, 'Number must have 13 symbols')\n        .trim()\n        .matches(phoneRegExp, 'Phone number must be a valid Ukrainian phone number')\n        .required('Required'),\n});\n\n\nexport default function ContactsForm() {\n  const [addContact] = useAddContactMutation();\n  const { data: contactsData, isError } = useGetContactsQuery();\n\n  const initialValues = {\n    name: '',\n    phone: '',\n  };\n\n  const handleAddContact = async (values, resetForm) => {\n    const { name, phone } = values;\n\n    if (!isError && contactsData) {\n      const contactExists = contactsData.some(contact => contact.name === name || contact.number === phone);\n      if (contactExists) {\n        alert(`Contact with name \"${name}\" or number \"${phone}\" already exists!`); \n      } else {\n        const formObj = {\n          name,\n          number: phone,\n        };\n        await addContact(formObj).unwrap();\n        resetForm();\n      }\n    }\n  };\n\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={(values, { resetForm }) => handleAddContact(values, resetForm)}\n      validationSchema={validationSchema}\n    >\n      {({ errors, touched }) => (\n        <Form>\n          <FormControl\n            noValidate\n            autoComplete=\"off\"\n            sx={{\n              minWidth: '350px',\n              maxWidth: '500px',\n              gap: '10px',\n              margin: '0 auto',\n            }}\n          >\n            <Field\n              as={TextField}\n              id=\"outlined-search\"\n              label=\"Full Name\"\n              name=\"name\"\n              type=\"text\"\n              error={touched.name && !!errors.name}\n              helperText={touched.name && errors.name}\n            />\n            <Field\n              as={TextField}\n              id=\"outlined-search\"\n              label=\"Phone\"\n              name=\"phone\"\n              type=\"tel\"\n              error={touched.phone && !!errors.phone}\n              helperText={touched.phone && errors.phone}\n            />\n            <Typography variant=\"caption\" color=\"text.secondary\">\n              Phone number must be a valid Ukrainian phone number\n              (+380XXXXXXXXX)\n            </Typography>\n            <Button variant=\"contained\" size=\"small\" type=\"submit\">\n              Add contact\n            </Button>\n          </FormControl>\n        </Form>\n      )}\n    </Formik>\n  );\n}","import React, { useMemo } from 'react';\n\nimport { useSelector } from 'react-redux';\n\nimport Filter from 'components/Filter/Filter';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport ContactsForm from 'components/Form/Form';\nimport Box from '@mui/material/Box';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { useGetContactsQuery } from 'redux/contactsAPI';\n\nconst getFilteredContacts = (contacts, filterValue) =>\n  contacts.filter(el => el.name.toLowerCase().includes(filterValue));\n\nconst Contacts = React.memo(() => {\n  const { data: contacts = [], error, isLoading } = useGetContactsQuery();\n\n  const filterValue = useSelector(state => state.filter);\n\n  const contactsArr = useMemo(\n    () => getFilteredContacts(contacts, filterValue),\n    [contacts, filterValue]\n  );\n\n  return (\n    <div>\n      <ContactsForm />\n      {isLoading && !error && (\n        <Box sx={{ display: 'flex', justifyContent: 'center' }}>\n          <CircularProgress />\n        </Box>\n      )}\n\n      {!isLoading && error && <div>Error</div>}\n      {!isLoading &&\n        (contactsArr.length > 1 || filterValue !== '' ? <Filter /> : null)}\n\n      {!isLoading && contactsArr.length > 0 && (\n        <ContactsList contacts={contactsArr} />\n      )}\n    </div>\n  );\n});\n\nexport default Contacts;"],"names":["Filter","dispatch","useDispatch","setFilterData","useCallback","e","value","currentTarget","filterChange","toLowerCase","_jsx","FormControl","sx","minWidth","maxWidth","gap","margin","children","TextField","id","label","variant","type","pattern","onChange","React","_ref","name","phone","_useDeleteContactMuta","useDeleteContactMutation","deleteContact","_slicedToArray","handleDelete","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","stop","_x","apply","arguments","_Fragment","_jsxs","ListItem","secondaryAction","IconButton","edge","onClick","color","DeleteIcon","ListItemAvatar","Avatar","size","bgcolor","colors","FaceIcon","ListItemText","primary","secondary","style","boxShadow","borderRadius","border","p","alignItems","padding","contacts","Stack","direction","justifyContent","List","map","number","ContactsListItem","validationSchema","Yup","shape","min","max","required","length","trim","matches","ContactsForm","_useAddContactMutatio","useAddContactMutation","addContact","_useGetContactsQuery","useGetContactsQuery","contactsData","data","isError","handleAddContact","values","resetForm","formObj","some","contact","alert","concat","unwrap","_x2","Formik","initialValues","onSubmit","_ref3","errors","touched","Form","noValidate","autoComplete","Field","as","error","helperText","Typography","Button","_useGetContactsQuery$","isLoading","filterValue","useSelector","state","filter","contactsArr","useMemo","el","includes","getFilteredContacts","Box","display","CircularProgress","ContactsList"],"sourceRoot":""}